CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`customer_order_list`(IN `pDateF` VARCHAR(20), IN `pDateT` VARCHAR(20), in pUSERID INT)
begin


	SELECT
			odr.id,
            odr.order_code,
			odr.order_number ,
			odr_rate.amount,
			odr_tran.shipping_carrier,
			CONCAT('\'' , odr_tran.tracking_number) tracking,
			odr_rate.provider,
		    odr.partner_code,
			addr.zip,
            addr.name as receiver_name,
			CONCAT( addr.street1, ', ' , addr.city, ',', addr.state,  ',', addr.country) ADDR,
			pkg.weight,
			pkg.width,
			pkg.height,
			pkg.length,
			(SELECT GROUP_CONCAT(DISTINCT name
	        ORDER BY name ASC
	        SEPARATOR ';') from products WHERE id in (SELECT product_id  from order_product WHERE order_product.order_id = odr.id)) ITEM,
	        odr.created_at

	FROM
		orders odr
		INNER JOIN order_package pkg ON odr.id = pkg.order_id
		INNER JOIN order_addresses addr ON addr.id = odr.order_address_to_id
	    LEFT JOIN order_transactions odr_tran  ON odr.id = odr_tran.order_id
	    LEFT JOIN order_rates odr_rate ON odr_tran.order_rate_id  = odr_rate.id

	where
		odr.user_id = pUSERID and
		odr.created_at  between STR_TO_DATE(pDateF, '%Y-%m-%d') and DATE_ADD(STR_TO_DATE(pDateT, '%Y-%m-%d'), INTERVAL 1 DAY)
	order by odr.created_at desc;




END;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`exportOrder`(IN `pDateF` VARCHAR(20), IN `pDateT` VARCHAR(20))
SELECT		
		odr.id,
		odr.order_number ,
		odr_rate.amount, 
		CONCAT('\'' , odr_tran.tracking_number) tracking,		
		odr_rate.provider,			
		odr.partner_code,	
		addr.zip,
        addr.name as receiver_name,
		CONCAT( addr.street1, ', ' , addr.city, ',', addr.state,  ',', addr.country) ADDR,	
		pkg.weight,		
		pkg.width,
		pkg.height,
		pkg.length,
		(SELECT GROUP_CONCAT(DISTINCT name
        ORDER BY name ASC
        SEPARATOR ';') from products WHERE id in (SELECT product_id  from order_product WHERE order_product.order_id = odr.id)) ITEM,
        odr.created_at	
        		
FROM 
	orders odr
	INNER JOIN order_package pkg ON odr.id = pkg.order_id
	INNER JOIN order_addresses addr ON addr.id = odr.order_address_to_id 
    INNER JOIN order_transactions odr_tran  ON odr.id = odr_tran.order_id 
    INNER JOIN order_rates odr_rate ON odr_tran.order_rate_id  = odr_rate.id 

where odr_tran.created_at  between STR_TO_DATE(pDateF, '%Y-%m-%d') and DATE_ADD(STR_TO_DATE(pDateT, '%Y-%m-%d'), INTERVAL 1 DAY);

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`exportSKU`(IN `p_user_id` INT)
select name, (select sku  from inventories where product_id = products.id) as SKU from products where user_id = p_user_id;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`label_create_input`(

		in 	p_user_id INT,
		IN	p_order_id INT,		
		IN	p_shipping_name VARCHAR(30),     
		IN	p_shipping_street VARCHAR(100),
		IN	p_shipping_address1 VARCHAR(100),
		IN	p_shipping_address2 VARCHAR(100),
		IN	p_shipping_company VARCHAR(100),
		IN	p_shipping_city VARCHAR(100),
		IN	p_shipping_zip VARCHAR(30),
		IN	p_shipping_province VARCHAR(30),
		IN	p_shipping_country VARCHAR(30),
		IN	p_shipping_phone VARCHAR(30),
		IN	p_amount VARCHAR(30),
		IN	p_currency VARCHAR(30),
		
		IN	p_label_url VARCHAR(100),
		IN	p_tracking_provider VARCHAR(30),
		IN	p_tracking_number VARCHAR(30),			
		IN	p_shipping_carrier VARCHAR(30),
		in  p_shipping_provider VARCHAR(30),
		
		in  p_width DOUBLE,
		in  p_height DOUBLE,
		in  p_length DOUBLE,
		in  p_weight DOUBLE,
		in p_size_type int,
		in p_weight_type int
		
		
)
this_proc:begin
	
	DECLARE i_id_rate INT default 0;
	DECLARE i_address INT default 0;

	DECLARE i_count INT default 0;

	SELECT count(*) into i_count from orders WHERE  id  = p_order_id and tracking is not null;
	if (i_count>0) then 
		leave this_proc;
	end if;

	
	
	
	
	-- SELECT `AUTO_INCREMENT` into i_address FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'phoenix' AND   TABLE_NAME   = 'order_addresses';

	insert into order_addresses
		(			
			user_id,
			object_id,
			city,
			company,
			country,			
			name,
			phone,
			state,
			street1,
			street2,				
			zip,			
			created_at
		)
		values
		(
			p_user_id,
			UUID(),
			p_shipping_city,
			p_shipping_company,
			p_shipping_country,
			p_shipping_name,
			p_shipping_phone,
			p_shipping_province,
			p_shipping_street,
			p_shipping_address1,
			p_shipping_zip,
			SYSDATE()		
			
		);
	
	SELECT LAST_INSERT_ID() into i_address from dual;

	-- SELECT `AUTO_INCREMENT` into i_id_rate FROM  INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'phoenix' AND   TABLE_NAME   = 'order_rates';

	insert into order_rates 
		(		
			  
			  order_id,			  
			  is_active,
			  object_id,
			  object_owner,
			  shipment,
			  provider_image_75,
			  provider_image_200,
			  service_name,			  
			  estimated_days,
			  duration_terms,			  
			  amount,
			  currency,
			  amount_local,
			  currency_local,
			  provider,			  
			  created_at,
			  updated_at       
		)
		values
		(
				
				p_order_id,
				0,
				UUID(),
				'owner',
				'shipment',
				'img',
				'img',
				'service_name',
				0,
				'duration_term',				
				p_amount,
				p_currency,
				p_amount,
				p_currency,
				p_shipping_carrier,						
				SYSDATE(),
				SYSDATE()
		);
	
	SELECT LAST_INSERT_ID() into i_id_rate from dual;


	insert into order_transactions
		(
			order_id,
			order_rate_id,
			shipping_name,     
			shipping_street,
			shipping_address1,
			shipping_address2,
			shipping_company,
			shipping_city,
			shipping_zip,
			shipping_province,
			shipping_country,
			shipping_phone,			
			transaction_id,			
			tracking_provider,
			tracking_number ,
			tracking_status,			
			created_at,		
			shipping_carrier,
			label_url,
			shipping_provider
		) 
		values
		(
			p_order_id,
			i_id_rate,
			p_shipping_name,
			p_shipping_street,
			p_shipping_address1,
			p_shipping_address2,
			p_shipping_company,
			p_shipping_city,
			p_shipping_zip,
			p_shipping_province,
			p_shipping_country,
			p_shipping_phone,
			UUID(),
			p_tracking_provider,
			p_tracking_number,
			'PRE_TRANSIT',
			SYSDATE(),
			p_shipping_carrier,
			p_label_url,
			p_shipping_provider
			

			
			
			
		)
		;
	
	update orders set tracking = p_tracking_number, order_address_from_id = i_address where id  = p_order_id;
	update order_package set width = p_width, height = p_height, length =p_length, weight = p_weight, size_type = p_size_type, weight_type = p_weight_type  where order_id = p_order_id;





END;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`order_list_staff`(
	IN `pDateF` VARCHAR(20),
	IN `pDateT` VARCHAR(20),
	in p_picking INT
	)
begin

	select
		odr.picking_status, count(odr.id) as count
    from
		orders odr
		INNER JOIN order_package pkg ON odr.id = pkg.order_id
		INNER JOIN order_addresses addr ON addr.id = odr.order_address_to_id
		LEFT JOIN order_transactions odr_tran  ON odr.id = odr_tran.order_id
		LEFT JOIN order_rates odr_rate ON odr_tran.order_rate_id  = odr_rate.id
    where
		odr.created_at  between STR_TO_DATE(pDateF, '%Y-%m-%d') and DATE_ADD(STR_TO_DATE(pDateT, '%Y-%m-%d'), INTERVAL 1 day)
	group by picking_status;

	-- 99 SELECT ALL
	if p_picking = 99 then

		SELECT
				odr.id,
                odr.order_code,
                odr.picking_status,
				odr.order_number,
			    odr_rate.amount,
				odr_tran.tracking_number,
				odr_tran.label_url ,
				odr_rate.provider,
			    odr.partner_code,
				addr.zip,
				addr.name,
				CONCAT( addr.street1, ', ' , addr.city, ',', addr.state,  ',', addr.country) addr,
				pkg.weight,
				pkg.width,
				pkg.height,
				pkg.length,
                pkg.weight_type,
				pkg.size_type,
				(
					SELECT GROUP_CONCAT(DISTINCT name
		        	ORDER BY name ASC
		        	SEPARATOR ';') from products WHERE id in (SELECT product_id  from order_product WHERE order_product.order_id = odr.id)
		        ) item,
		        odr_prod.quantity,
		        odr.created_at,
				odr_tran.created_at AS transactions_created_at,
				odr_tran.id AS transactions_id,
				odr_rate.id AS odr_rate_id,
				odr.order_address_to_id,
                users.email AS user_email,
                users.partner_code,

                (select count(*)  from  order_journey left join packing_list on packing_list.id = id_packing_list where  order_id = odr.id and id_packing_list is not null and packing_list.status = 10) as count_pkl


		FROM
			orders odr
			INNER JOIN order_package pkg ON odr.id = pkg.order_id
			INNER JOIN order_addresses addr ON addr.id = odr.order_address_to_id
            LEFT JOIN order_product odr_prod ON odr.id = odr_prod.order_id
		    LEFT JOIN order_transactions odr_tran  ON odr.id = odr_tran.order_id
		    LEFT JOIN order_rates odr_rate ON odr_tran.order_rate_id  = odr_rate.id
		    LEFT JOIN users ON users.id  = odr.user_id

		where
			odr.deleted_at IS NULL AND
			odr.created_at  between STR_TO_DATE(pDateF, '%Y-%m-%d') and DATE_ADD(STR_TO_DATE(pDateT, '%Y-%m-%d'), INTERVAL 1 DAY)
		order by odr.created_at desc;
	else
			SELECT
					odr.id,
					odr.order_code,
					odr.picking_status,
					odr.order_number,
				    odr_rate.amount,
					odr_tran.tracking_number,
					odr_tran.label_url ,
					odr_rate.provider,
				    odr.partner_code,
					addr.zip,
					addr.name,
					CONCAT( addr.street1, ', ' , addr.city, ',', addr.state,  ',', addr.country) addr,
					pkg.weight,
					pkg.width,
					pkg.height,
					pkg.length,
                    pkg.weight_type,
                    pkg.size_type,
					(
						SELECT GROUP_CONCAT(DISTINCT name
			        	ORDER BY name ASC
			        	SEPARATOR ';') from products WHERE id in (SELECT product_id  from order_product WHERE order_product.order_id = odr.id)
			        ) item,
					odr_prod.quantity,
			        odr.created_at,
			        odr_tran.created_at AS transactions_created_at,
                    odr_tran.id AS transactions_id,
                    odr_rate.id AS odr_rate_id,
                    odr.order_address_to_id,
					users.email AS user_email,
					users.partner_code,
					(select count(*)  from  order_journey left join packing_list on packing_list.id = id_packing_list where  order_id = odr.id and id_packing_list is not null and packing_list.status = 10) as count_pkl


			FROM
				orders odr
				INNER JOIN order_package pkg ON odr.id = pkg.order_id
				INNER JOIN order_addresses addr ON addr.id = odr.order_address_to_id
				LEFT JOIN order_product odr_prod ON odr.id = odr_prod.order_id
			    LEFT JOIN order_transactions odr_tran  ON odr.id = odr_tran.order_id
			    LEFT JOIN order_rates odr_rate ON odr_tran.order_rate_id  = odr_rate.id
				LEFT JOIN users ON users.id  = odr.user_id

			where
				odr.deleted_at IS NULL AND
				odr.created_at  between STR_TO_DATE(pDateF, '%Y-%m-%d') and DATE_ADD(STR_TO_DATE(pDateT, '%Y-%m-%d'), INTERVAL 1 DAY) and
				odr.picking_status = p_picking
			order by odr.created_at desc;

	end if;
END;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`packinglistDetails`(IN `pPackingListCode` VARCHAR(20))
SELECT * from order_journey where id_packing_list = (SELECT id FROM packing_list WHERE packing_list_code = pPackingListCode) and inout_type = 1;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`search_bill`(IN `p_code` VARCHAR(30))
begin
	
	DECLARE i_id INT default 0;

	select id into i_id from orders where order_code COLLATE utf8mb4_general_ci = p_code;
	
	select 
		order_number,
		partner_code,
		(select concat('<b>(', width , ' x ' , height , ' x ' , length, ')' , ' Weight ' , weight ,'</b>' ) from order_package where order_id = i_id) as DWS,		
		(select concat( name, ' , ' , street1 , ', ' ,  state ,', ', upper(country), ', ', zip    )  from order_addresses where id = order_address_from_id) as FROM_ADD,
		(select concat( name, ' , ' , street1 , ', ' ,  state ,', ', upper(country), ', ', zip    )  from order_addresses where id = order_address_to_id) as TO_ADD			
		from orders where id = i_id;
	
	select 
		id_packing_list,
		(select packing_list_code  from packing_list where id = id_packing_list) packing_list_code,
		user_create,
		created_date,
		from_warehouse,
		to_warehouse,
		created_at
	from order_journey where order_id = i_id and inout_type = 1 and id_packing_list is not null; 

	select * from order_tracking_journey  where bill_code COLLATE utf8mb4_general_ci  = p_code order by date_journey desc ;
	
END;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`search_bill_public`(in p_code VARCHAR(30))
begin
	
	
	DECLARE i_id INT default 0;

	select id into i_id from orders where order_code COLLATE utf8mb4_general_ci = p_code;
	
	select 
		order_number,			
		(select concat(  state ,', ', upper(country)    )  from order_addresses where id = order_address_to_id) as TO_ADD			
		from orders where id = i_id;
	
	 

	select * from order_tracking_journey  where bill_code COLLATE utf8mb4_general_ci  = p_code order by create_date desc ;
END;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`search_packinglist_detail`(IN `p_code` VARCHAR(30))
begin

select
		odr.id,
		odr.order_code,
		odr.order_number,
		odr.tracking ,
		odr.created_at,
        ord_trans.tracking_provider
		from orders odr
	INNER JOIN order_journey pkg ON odr.id = pkg.order_id
    LEFT JOIN order_transactions ord_trans ON odr.id = ord_trans.order_id

	where
		id_packing_list = (select id from packing_list where  packing_list_code COLLATE utf8mb4_general_ci = p_code ) and
		inout_type = 1
	;

END;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`webhook_info_shippo`(IN `p_code` VARCHAR(30), IN `p_provider` VARCHAR(30))
begin
	
	select count(*) as COUNT  from order_tracking_journey  where bill_code_ref COLLATE utf8mb4_general_ci  = p_code and carrier COLLATE utf8mb4_general_ci  = p_provider;
END;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`webhook_trackupdate_17track`( in p_bill_ref VARCHAR(30), in p_bill_carrier VARCHAR(30), in p_billcode VARCHAR(30), in p_status VARCHAR(100), in p_note VARCHAR(200), in p_location VARCHAR(100), in p_city VARCHAR(30),in p_country varchar(30), in p_date_journey DATETIME)
begin

	insert into order_tracking_journey ( bill_code_ref, carrier, bill_code, status, note, location, city, country, date_journey, provider) values
	(
		p_bill_ref,
		p_bill_carrier,
		p_billcode,
		p_status,
		p_note,
		p_location,
		p_city,
		p_country,
		p_date_journey,
		p_bill_carrier

	);
end;

CREATE DEFINER=`fmus`@`%` PROCEDURE `fmus`.`webhook_trackupdate_shippo`(IN `p_bill_ref` VARCHAR(30), IN `p_status` VARCHAR(100), IN `p_note` VARCHAR(200), IN `p_location` VARCHAR(100), IN `p_city` VARCHAR(30), IN `p_country` VARCHAR(30), IN `p_date_journey` DATETIME)
begin
	
	
	DECLARE i_billcode VARCHAR(30) default '';
	DECLARE i_bill_carrier VARCHAR(30) default '';
	DECLARE i_orderid INT default 0;
	DECLARE i_order_rateid INT default 0;

	select order_id, order_rate_id  into i_orderid, i_order_rateid from order_transactions where tracking_number COLLATE utf8mb4_general_ci  =  p_bill_ref and shipping_provider = 'SHIPPO';
	select order_code into i_billcode from orders where id = i_orderid;
	select provider into i_bill_carrier from order_rates where id = i_order_rateid;


	insert into order_tracking_journey ( bill_code_ref, carrier, bill_code, status, note, location, city, country, date_journey, provider) values	
	(
		p_bill_ref,
		i_bill_carrier,
		i_billcode,
		p_status,
		p_note,
		p_location,
		p_city,
		p_country,
		p_date_journey,
		'SHIPPO'
		
		
	);
end;